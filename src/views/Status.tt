(: using StringTools :)
(: import db.Types :)
(: static function render (card : CardRequestState) :)
<div class="ui vertical segment">
    <div class="ui container">
        <div class="ui ordered steps">
            <div class="step (:compare(card,AwaitingBearerData).trim():)">
                <div class="content">
                    <div class="title">Dados Pessoais</div>
                    <div class="description">Entre com seus dados</div>
                </div>
            </div>

            <div class="step (:compare(card,AwaitingBearerConfirmation).trim():)">
                <div class="content">
                    <div class="title">Confirmação</div>
                    <div class="description">Confirme que seus dados estão corretos</div>
                </div>
            </div>

            <div class="step (:compare(card, Queued(null)).trim():) negative">
                <div class="content">
                    <div class='title'>Análise</div>
                    <div class="description">Estamos validando se está tudo Ok.</div>
                </div>
            </div>

            <div class="step (:compare(card, CardRequested).trim():)">
                <div class="content">
                <div class="title">Dados aprovados!</div>
                <div class="description">Seu cartão será confeccionado!</div>
                </div>
            </div>
        </div>
    </div>
</div>    

    (: if card.match(Failed(err,s)) :)
        
        (: do var err = switch(card) {case Failed(err, s): err; default: null;} :)
        <div class="ui segment">
            <div class="ui container">
                <div class="ui red message">
                    <div class="header">Ocorreu um erro nesta etapa</div>
                    (: switch err :)
                        (: case UserOrDataError(res),PermanentSystemError(res) :)
                            (:res.Message:)
                            (: if res.FieldErrors != null :)
                                <ul>
                                (: for r in res.FieldErrors :)
                                    <li>(:r.Message:)</li>
                                (: end :)
                                </ul>
                            (:end:)
                        (: case TemporarySystemError(_), TransportError(_) :)
                            Tente acessar este sistema mais tarde.
                    (: end :)
                </div>
            </div>
        </div>
    (:else:) (:end:)

(:end:)

(: static function compare(cur : CardRequestState, baseline : CardRequestState) :)
    (: switch(cur) :)
    (: case Failed(err,s) :)
        (: do cur = s :)
    (: case v :)
    (:end:)

    (: do var curIndex = Type.enumIndex(cur) :)
    (: do var baseIndex = Type.enumIndex(baseline) :)

    (: if (curIndex > baseIndex) :)
        completed
    (: else if (curIndex == baseIndex) :)
        active
    (: else if (curIndex < baseIndex) :)
        disabled
    (:else:) (:end:)
(:end:)
